import org.gradle.api.JavaVersion

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.siouan.frontend-jdk17" version "8.0.0"
    id 'war'
}

group = 'com.greglturnquist'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    // To support war file for deploying to tomcat
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

frontend {
    nodeVersion = "16.20.2"

    System.out.println(String.format("I am running on: %s(%s)", System.getProperty("os.arch"), System.getProperty("os.name")))

    if (System.getProperty("os.arch").equals("aarch64")) {
        if (System.getProperty("os.name").equals("Linux")) {
            nodeDistributionUrlPathPattern = 'vVERSION/node-vVERSION-linux-arm64.TYPE'
        }

        if (System.getProperty("os.name").equals("Mac OS X")) {
            nodeDistributionUrlPathPattern.set("vVERSION/node-vVERSION-darwin-x64.TYPE")
        }
    }

    assembleScript = 'run webpack'
    //assembleScript = "run build"
    //cleanScript = "run clean"
    //checkScript = "run check"
}

tasks.named('test') {
    useJUnitPlatform()
}


task copyJarToDist(type: Copy) {
    group = 'Distribution'
    description = 'Copy the generated JAR files to the dist folder'

    // Define the source directory
    def sourceJars = fileTree('build/libs/').include('*.jar')

    // Define the destination directory for the copy
    def distDir = file("${project.rootDir}/dist")

    // Configure the copy operation
    from sourceJars
    into distDir
}

task cleanupWebpack(type: Delete) {
    group = 'Cleanup'
    description = 'Delete all files generated by webpack'

    // Define the directory containing webpack-generated files
    def webpackOutputDir = file('src/main/resources/static/built')

    // Configure the cleanup operation
    delete webpackOutputDir
}

build.dependsOn cleanupWebpack